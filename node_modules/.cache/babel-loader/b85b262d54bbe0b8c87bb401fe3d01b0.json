{"ast":null,"code":"export default class RestaurantService {\n  static getRestaurants() {\n    return fetch('http://localhost:3001/pokemons').then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static getRestaurant(id) {\n    return fetch(\"http://localhost:3001/pokemons/\".concat(id)).then(response => response.json()).then(data => this.isEmpty(data) ? null : data).catch(error => this.handleError(error));\n  }\n\n  static updateRestaurant(restaurant) {\n    return fetch(\"http://localhost:3001/pokemons/\".concat(restaurant.id), {\n      method: 'PUT',\n      body: JSON.stringify(restaurant),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static deleteRestaurant(restaurant) {\n    return fetch(\"http://localhost:3001/pokemons/\".concat(restaurant.id), {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static addRestaurant(restaurant) {\n    //delete pokemon.created;\n    return fetch(\"http://localhost:3001/pokemons/\", {\n      method: 'POST',\n      body: JSON.stringify(restaurant),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error) {\n    console.log(error);\n  }\n\n  static searchRestaurant(term) {\n    return fetch(\"http://localhost:3001/pokemons?q=\".concat(term)).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n}","map":{"version":3,"sources":["D:/_Projet Git/PlatsDuJour/platsDuJour/src/services/restaurant-service.ts"],"names":["RestaurantService","getRestaurants","fetch","then","response","json","catch","error","handleError","getRestaurant","id","data","isEmpty","updateRestaurant","restaurant","method","body","JSON","stringify","headers","deleteRestaurant","addRestaurant","Object","keys","length","console","log","searchRestaurant","term"],"mappings":"AAEA,eAAe,MAAMA,iBAAN,CAAwB;AAEhB,SAAdC,cAAc,GAA0B;AAC7C,WAAOC,KAAK,CAAC,gCAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJC,KAFI,CAEEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAFX,CAAP;AAGD;;AAEmB,SAAbE,aAAa,CAACC,EAAD,EAAuC;AACzD,WAAOR,KAAK,0CAAmCQ,EAAnC,EAAL,CACJP,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECQ,IAAI,IAAI,KAAKC,OAAL,CAAaD,IAAb,IAAqB,IAArB,GAA4BA,IAFrC,EAGJL,KAHI,CAGEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAHX,CAAP;AAID;;AAEsB,SAAhBM,gBAAgB,CAACC,UAAD,EAA8C;AACjE,WAAOZ,KAAK,0CAAmCY,UAAU,CAACJ,EAA9C,GAAoD;AAC5DK,MAAAA,MAAM,EAAE,KADoD;AAE5DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,UAAf,CAFsD;AAG5DK,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAHmD,KAApD,CAAL,CAKJhB,IALI,CAKCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALb,EAMJC,KANI,CAMEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANX,CAAP;AAOH;;AAEsB,SAAhBa,gBAAgB,CAACN,UAAD,EAAsC;AAC3D,WAAOZ,KAAK,0CAAmCY,UAAU,CAACJ,EAA9C,GAAoD;AAC5DK,MAAAA,MAAM,EAAE,QADoD;AAE5DI,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFmD,KAApD,CAAL,CAIFhB,IAJE,CAIGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJf,EAKFC,KALE,CAKIC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CALb,CAAP;AAMD;;AAEmB,SAAbc,aAAa,CAACP,UAAD,EAA8C;AAC9D;AAEF,WAAOZ,KAAK,oCAAoC;AAC5Ca,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,UAAf,CAFsC;AAG5CK,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAHmC,KAApC,CAAL,CAKFhB,IALE,CAKGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALf,EAMFC,KANE,CAMIC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANb,CAAP;AAOD;;AAGa,SAAPK,OAAO,CAACD,IAAD,EAAwB;AACpC,WAAOW,MAAM,CAACC,IAAP,CAAYZ,IAAZ,EAAkBa,MAAlB,KAA6B,CAApC;AACD;;AAEiB,SAAXhB,WAAW,CAACD,KAAD,EAAqB;AACnCkB,IAAAA,OAAO,CAACC,GAAR,CAAYnB,KAAZ;AAEH;;AAEsB,SAAhBoB,gBAAgB,CAACC,IAAD,EAAsC;AAC3D,WAAO1B,KAAK,4CAAqC0B,IAArC,EAAL,CACNzB,IADM,CACDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADX,EAENC,KAFM,CAEAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAFT,CAAP;AAGD;;AA5DoC","sourcesContent":["import Restaurant from \"../models/restaurant\";\r\n \r\nexport default class RestaurantService {\r\n \r\n  static getRestaurants(): Promise<Restaurant[]> {\r\n    return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n  }\r\n \r\n  static getRestaurant(id: number): Promise<Restaurant|null> {\r\n    return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error));\r\n  }\r\n\r\n  static updateRestaurant(restaurant: Restaurant): Promise<Restaurant> {\r\n      return fetch(`http://localhost:3001/pokemons/${restaurant.id}`, {\r\n          method: 'PUT',\r\n          body: JSON.stringify(restaurant),\r\n          headers: { 'Content-Type': 'application/json' }\r\n      })\r\n        .then(response => response.json())\r\n        .catch(error => this.handleError(error));\r\n  }\r\n\r\n  static deleteRestaurant(restaurant: Restaurant): Promise<{}> {\r\n    return fetch(`http://localhost:3001/pokemons/${restaurant.id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json' }\r\n    })\r\n        .then(response => response.json())\r\n        .catch(error => this.handleError(error));\r\n  }\r\n\r\n  static addRestaurant(restaurant: Restaurant): Promise<Restaurant> {\r\n      //delete pokemon.created;\r\n\r\n    return fetch(`http://localhost:3001/pokemons/`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(restaurant),\r\n        headers: { 'Content-Type': 'application/json' }\r\n    })\r\n        .then(response => response.json())\r\n        .catch(error => this.handleError(error));\r\n  }\r\n        \r\n \r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n\r\n  static handleError(error: Error): void {\r\n      console.log(error);\r\n      \r\n  }\r\n\r\n  static searchRestaurant(term: string): Promise<Restaurant[]> {\r\n    return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n    .then(response => response.json())\r\n    .catch(error => this.handleError(error));\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}